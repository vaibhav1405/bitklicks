<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wassup chat app</title>
    <link rel="stylesheet" href="./public/style.css">
    <%- include ../views/common/scripts.ejs %>
<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

body {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: #F8F8F8;
    font-family: 'Roboto', sans-serif;
    padding-bottom: 50px;
}
section.chat__section {
    width: 70%;
    max-width: 90%;
    background: #fff;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}
.brand {
    padding: 20px;
    background: #f1f1f1;
    display: flex;
    align-items: center;
}
.brand h1 {
    text-transform: uppercase;
    font-size: 20px;
    color: #444;
    margin-left: 10px;
}
.message__area{
    height: 500px;
    padding: 16px;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    padding-top: 40px;
}
textarea {
    width: 100%;
    border: none;
    padding: 20px;
    font-size: 16px;
    outline: none;
    background: #FBFBFB;
}

.message {
    padding: 20px; 
    border-radius: 4px; 
    margin-bottom: 40px;
    max-width: 300px;
    position: relative;
}
.incoming {
    background: #8F8BE8;
    color: #fff;  
}
.outgoing {
    background: #e9eafd;
    color: #787986;
    margin-left: auto;
}
.message h4 {
    position: absolute;
    top: -20px;
    left: 0;
    color: #333;
    font-size: 14px;
}
</style>


<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
<!-- <script src="http://localhost:3030/socket.io/socket.io.js"></script> -->



</head>

<body>
    <%-include ../views/common/navbar.ejs %>
    <input type="hidden" value="<%= from %> " class="from">
    <input type="hidden" value="<%= token %> " class="token">

    <section class="chat__section">
        <div class="brand">
            
            <h1>Message</h1>
        </div>
        
        <div class="message__area">
           <% if(message) { %>
            <% message.forEach((d)=>{ %>
                <% console.log(d.from , sess.email) %>
                <% if(d.from == sess.email){ %>
            <% console.log(d.from , sess.email) %>
                <div class="outgoing">
            
                    <h4><%= d.from %></h4>
                    <p><%= d.Message %></p>
                </div>
                <% } else {%>
                    <div class="incoming">
            
                        <h4><%= d.to %></h4>
                        <p><%= d.Message %></p>
                    </div>
                    <%} %>
                <%  }) %>
                <% }  %>
        </div>
        
        <div>
            <textarea id="textarea" cols="30" rows="1" placeholder="Write a message..."></textarea>
        </div>
    </section>
    <script src="/socket.io/socket.io.js"></script>
    <!-- <script src="./public/client.js"></script> -->
    <script>
// const socket = io();
var socket = io.connect('http://127.0.0.1:3000/', {reconnect: true});

let name;
let to = "vaibhavdadhich74@gmail.com"
let textarea = document.querySelector('#textarea')
let messageArea = document.querySelector('.message__area')

// do {
//     name = prompt('Please enter your name: ')
// } while(!name)
name = document.querySelector('.from').value;
if(name){
 socket.on('connect', function(data) {
     let tokentosend= document.querySelector('.token').value;
    socket.emit('join', tokentosend);
 });
}

textarea.addEventListener('keyup', (e) => {
    if(e.key === 'Enter') {
        sendMessage(e.target.value)
    }
})

function sendMessage(message) {
    let msg = {
        user: name,
        message: message.trim()
    }
    // Append 
    appendMessage(msg, 'outgoing')
    textarea.value = ''
    scrollToBottom()

    // Send to server 
    socket.emit('message', msg)

}

function appendMessage(msg, type) {
    let mainDiv = document.createElement('div')
    let className = type
    mainDiv.classList.add(className, 'message')

    let msgserver = {
        from: msg.user,
        message: msg.message
    }
    console.log(msgserver);
    socket.emit('sendMessage',msgserver )

    let markup = `
        <h4>${msg.user}</h4>
        <p>${msg.message}</p>
    `

    mainDiv.innerHTML = markup
    messageArea.appendChild(mainDiv)


}

function addMessage(msg, type) {
    let mainDiv = document.createElement('div')
    let className = type
    mainDiv.classList.add(className, 'message')

    let markup = `
        <h4>${msg.from}</h4>
        <p>${msg.Message}</p>
    `
    
    mainDiv.innerHTML = markup
    messageArea.appendChild(mainDiv)

}
// Recieve messages 
socket.on('message', (msg) => {
    appendMessage(msg, 'incoming')
    scrollToBottom()
})

function scrollToBottom() {
    messageArea.scrollTop = messageArea.scrollHeight
}




        </script>
<!-- 
<% message.forEach((d)=>{ %>
    <% if(d.from == sess.email){ %>
    addMessage(d,'incoming') >
    <% } else {%>
    addMessage(d,'outgoing')
        <% } %>
    <% }) %>
     -->
<%- include ../views/common/footer.ejs %>
</body>

</html>